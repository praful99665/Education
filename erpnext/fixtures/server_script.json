[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-06 09:32:47.146464",
  "module": "HR",
  "name": "driving_school_script",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "driving_school",
  "script": "\n#     # Create a new driving record\n# driving_record = frappe.new_doc(\"driving\")\n# driving_record.firstname = doc.firstname1\n# driving_record.lastname = doc.lastname2\n# driving_record.gender = doc.gender3\n# driving_record.address = doc.address4\n    \n#     # Save the new driving record\n# driving_record.insert(ignore_permissions=True)\n# driving_record.submit()\n\n\n# # \na=doc.int_1\nb=doc.int_2\nsum=a+b\n\n\n\nval=doc.linkk\n\nmm=frappe.get_doc('driving',val)\nmm.sum_value = sum\nmm.save()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-06 09:33:03.716761",
  "module": "HR",
  "name": "child_server",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "driving_school",
  "script": "# In the server-side script of \"driving_school\" doctype\n\nif doc.linkk:  # Ensure linkk field is set\n    driving_doc = frappe.get_doc(\"driving\", doc.linkk)\n\n        # Clear existing d_child entries linked with the driving document\n    driving_doc.set(\"d_child\", [])\n\n        # Copy data from s_child to d_child in the linked driving document\n    for s_child_row in doc.get(\"s_child\"):\n        frappe.msgprint(s_child_row.age)\n        d_child_row = driving_doc.append(\"d_child\", {})\n        d_child_row.age = s_child_row.age  # Replace 'field_name' with the actual field name in s_child\n        d_child_row.date = s_child_row.date\n        d_child_row.phone = s_child_row.phone\n        # Save the linked \"driving\" document with updated d_child entries\n        driving_doc.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-04 12:40:27.965394",
  "module": "HR",
  "name": "test_dele",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "test_delete",
  "script": "# In the server-side script of \"Test Delete\" doctype\n\nif doc.linkk:  # Replace with your actual Link field name\n    frappe.delete_doc(\"driving\", doc.linkk, ignore_permissions=True)\n    \n\nAG=frappe.db.count('driving')\nfrappe.msgprint(str(AG))\ndoc.count=AG\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-08 22:29:26.186640",
  "module": "HR",
  "name": "test_del",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "test_delete",
  "script": "today = frappe.utils.nowdate()\n\n    # Get documents from test_delete with today's date\ndocuments_to_save = frappe.get_all(\"test_delete\", filters={\"date1\":today},fields=[\"firstname1\", \"lastname1\", \"gender1\", \"date1\",\"name\"])\n# frappe.msgprint(str(documents_to_save[0].firstname1))\n# frappe.msgprint(str(documents_to_save[0].lastname1))\n# fields=[\"firstname1\", \"lastname1\", \"gender1\", \"date1\",\"name\"]\n\na=documents_to_save[0].firstname1\nb=documents_to_save[0].lastname1\nc=documents_to_save[0].gender1\nd=documents_to_save[0].date1\n\n\n\nfor doc in documents_to_save:\n        # Create a new document in test_1delete and set values from test_delete\n    target_doc = frappe.new_doc(\"test_1delete\")\n    target_doc.firstname = a\n    target_doc.lastname = b\n    target_doc.gender = c\n    target_doc.date = d\n    \n    target_doc.insert()\n\nfrappe.msgprint(\"Documents saved successfully!\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# if getdate(nowdate()) == getdate(doc.date1):\n#     new_doc = frappe.model.new_doc(\"test_1delete\")\n#     new_doc.firstname = doc.firstname1\n#     new_doc.firstname = doc.lastname1\n#     new_doc.gender = doc.gender1\n#     new_doc.date =doc.date1\n#     new_doc.save()  \n#     frappe.msgprint(\"New document created in YourTargetDocType.\")\n    \n    \n    \n    \n    \n    \n    \n    \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "methodapi",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-10 16:10:44.374948",
  "module": "HR",
  "name": "travel_s_1",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "new_1=frappe.form_dict.a1\nnew_2=frappe.form_dict.a2\nnew_3=frappe.form_dict.a3\nnew_4=frappe.form_dict.a4\n\n\n# frappe.msgprint(str(new_1))\n# frappe.msgprint(str(new_2))\n# frappe.msgprint(str(new_3))\n# frappe.msgprint(str(new_4))\n\nnewdoc=frappe.new_doc('travel')\nnewdoc.firstname=new_1\nnewdoc.lastname=new_2\nnewdoc.gender=new_3\nnewdoc.dateofbirth=new_4\nnewdoc.save()\nfrappe.msgprint(\"Values saved to travel document!\")\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": "apimethod",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-23 15:24:31.899993",
  "module": "HR",
  "name": "arithmatic",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Arithmatic",
  "script": "a=doc.number1\nb=doc.number2\ns=a+b\n# doc.sum=s\ndoc.set_value('sum',s)\n\n\nval=doc.firstname\nee=frappe.get_doc('Employee',val)\nfrappe.msgprint(str(ee))\n\n\nfrappe.msgprint(str(ee.gender))\nfrappe.msgprint(str(ee.date_of_birth))\n\n\ndoc.gender1=ee.gender\ndoc.dob1=ee.date_of_birth\ndoc.lastname1=ee.last_name\nee.save()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "newAPImethod",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-23 15:25:00.165688",
  "module": "HR",
  "name": "leo_@",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "new_0=frappe.form_dict.A0\nnew_1=frappe.form_dict.A1\nnew_2=frappe.form_dict.A2\nnew_3=frappe.form_dict.A3\nnew_4=frappe.form_dict.A4\n\n\nfrappe.msgprint(str(new_0))\nfrappe.msgprint(str(new_1))\nfrappe.msgprint(str(new_2))\nfrappe.msgprint(str(new_3))\nfrappe.msgprint(str(new_4))\n\n# newdoc=frappe.new_doc('travel')\n# newdoc.firstname=new_1\n# newdoc.lastname=new_2\n# newdoc.gender=new_3\n# newdoc.dateofbirth=new_4\n# newdoc.save()\n# frappe.msgprint(\"Values saved to travel document!\")\n\n\nnew1doc=frappe.new_doc('leo')\nnew1doc.person_id=new_0\nnew1doc.firstname11=new_1\nnew1doc.secondname11=new_2\nnew1doc.dateofbirth11=new_3\nnew1doc.gender11=new_4\n\n\nnew1doc.save()\nfrappe.msgprint(\"Values saved to leo document!\")\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-10-26 15:33:54.732220",
  "module": null,
  "name": "PROGRAm",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Program",
  "script": "def filter_programs(doc, method):\n    doc.program_name = \"BBA\"\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-12 09:51:40.473659",
  "module": "Education",
  "name": "student_account_creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student",
  "script": "first_name = doc.first_name\nmiddle_name = doc.middle_name\nlast_name = doc.last_name\nN_name = doc.name\n# frappe.msgprint(str(lead))\nlast_five_digits = N_name[-5:]\n\n# Convert the last 5 digits to an integer (if needed)\nId = int(last_five_digits)\n\n# frappe.msgprint(f\"Last 5 digits: {last_five_digits}, Converted Id: {Id}\")\n\n\n# Concatenate the names to form the full name\nfull_name = \" \".join([name for name in [first_name, middle_name, last_name] if name])\n\n\nexisting_account = frappe.get_all(\"Account\", filters={\"account_name\":full_name+\" - \"+str(Id)})\n\nif existing_account:\n    frappe.msgprint(\"Account already exists.\")\n    doc.custom_student_account = existing_account[0].name\nelse:\n#     # Create a new account with the student's name\n    new_account = frappe.new_doc(\"Account\")\n    new_account.account_name = full_name+\" - \"+str(Id)\n    new_account.parent_account = \"Accounts Receivable - W\"\n    new_account.account_type = \"Receivable\"\n    new_account.insert()\n    \n    frappe.msgprint(\"New account created successfully.\")\n    doc.custom_student_account = new_account.name\n\nfrappe.msgprint(str(doc.custom_student_account))\n# ....................................................\n\n\n# .........................................\n\n# student_name = doc.custom_full_name\n\n# # Check if an account with the same name already exists\n# existing_account = frappe.get_all(\"Account\", filters={\"account_name\": student_name})\n\n# if existing_account:\n#     frappe.msgprint(\"Account already exists.\")\n#     doc.custom_student_account = existing_account[0].name\n# else:\n#     # Create a new account with the student's name\n#     new_account = frappe.new_doc(\"Account\")\n#     new_account.account_name = student_name\n#     new_account.parent_account = \"Accounts Receivable - W\"\n#     new_account.account_type = \"Receivable\"\n#     new_account.insert()\n    \n#     frappe.msgprint(\"New account created successfully.\")\n#     doc.custom_student_account = new_account.name\n\n# frappe.msgprint(str(doc.custom_student_account))\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-30 10:41:42.423372",
  "module": "Education",
  "name": "Setting_student_acc_to fees",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "# A = doc.student\n\n# xx = frappe.get_doc('Student' ,A)\n\n# if xx:\n#     frappe.msgprint(str(xx.custom_student_account))\n#     doc.receivable_account=xx.custom_student_account\n\n\n\n# \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "attandancee",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-13 13:15:29.217925",
  "module": "Education",
  "name": "setting_group_api",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# value1=[]\ncc=frappe.form_dict.name1\n# frappe.msgprint(str(cc))\nstudentgroups=frappe.get_list('Student Group',filters={'student_name':cc})\n# frappe.msgprint(str(studentgroups))\n\n# for i in studentgroups:\n#     frappe.msgprint(str(i))\n    \n\n\nfor j in studentgroups:\n    store= j \n    # frappe.msgprint(str(store))\n    value= store['name']\n#     value1.append(value)\n    frappe.msgprint(str(value))\n    \n# frappe.msgprint(str(value1))\n\n\n\n\n    \n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-17 17:15:58.726686",
  "module": "Education",
  "name": "unpaid_students",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fee Schedule",
  "script": "child_table_data = []\ntotal_1 = 0\na=None\nb=None\nc=[]\nunpaid_students = []\ntotal_fees_count = 0\nstudent_group_table=doc.student_groups\nfrappe.msgprint(str(student_group_table))\n\nfor i in student_group_table:\n    c.append(i.student_group)\n    frappe.msgprint(str(i.student_group))\n\nfor j in c:\n    group=frappe.get_doc('Student Group',j)\n    students=group.students\n    \n    for k in students:\n        frappe.msgprint(str(k.student_name))\n    \n#         fees_count=frappe.get_list('Fees',filters={'student_name':k.student_name,'outstanding_amount': ['>',0]})\n#         # frappe.msgprint(str(fees_count))\n#         # total_fees_count=(len(fees_count))+total_fees_count\n#         if fees_count:\n#             unpaid_students.append(k.student_name)  \n#             # frappe.msgprint(str(unpaid_students)\n#             # frappe.msgprint(str(total_fees_count))\n#             #  ....................................................\n#         for w in fees_count:\n#             kk = frappe.get_doc('Fees', w.name)\n#             outstanding_amount = kk.outstanding_amount\n#             student__name = kk.student_name\n#             # frappe.msgprint(str(student__name))\n#             # frappe.msgprint(str(outstanding_amount))\n\n#             child_table_data.append({\n#             'student_name': student__name,\n#             'outstanding_amount': outstanding_amount\n#             }) \n#             total_1 = total_1+outstanding_amount        \n# # frappe.msgprint(str(total_1)) \n# doc.custom_total_amount= total_1\n                      \n                \n# if  child_table_data:\n#     doc.set('custom_unpaid_students',[])\n    \n#     for data in child_table_data:\n#         row = doc.append('custom_unpaid_students', {})\n#         row.studentnam_e = data['student_name']\n#         row.amounts = data['outstanding_amount']\n#         row.save()  \n# doc.custom_total_grand_outstanding_amount = total_1\n        \n\n\n        \n#         if fees_count:\n#             unpaid_students.append(k.student_name)  \n#             frappe.msgprint(str(unpaid_students))\n            \n\n# # Print the names of students who have not paid\n# if unpaid_students:\n#     unpaid_students_msg = \", \".join(unpaid_students)\n#     frappe.msgprint(f\"Students who have not paid fees: {unpaid_students_msg}\")\n    \n# else:\n#     frappe.msgprint(\"All students have paid their fees.\")\n        # .....................................................\n\n\n# x=doc.student_groups\n\n# for i in x:\n#     i.custom_tot=total_fees_count\n\n\n    \n# unpaidtable = doc.unpaid\n\n# # Iterate over each entry in unpaidtable and assign corresponding student name\n# if len(unpaid_students) > 0:\n#     doc.set('custom_unpaid_students',[])\n    \n#     for q in unpaid_students:\n#         child_row = doc.append('custom_unpaid_students', {})\n#         child_row.studentnam_e=q\n\n    \n    \n\n\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-17 10:36:40.953118",
  "module": "Education",
  "name": "stdfeesshedule",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fee Schedule",
  "script": "feeslist = []\ngroup = []\nA=doc.student_groups\nfs = doc.fee_structure\n# frappe.msgprint(str(fs))\n\n\nfor i in A:\n    # frappe.msgprint(str(i.student_group))\n    \n    # for j in i.student_group:\n    S = frappe.get_doc('Student Group',i)\n    # frappe.msgprint(str(S))\n    for j in S.students:\n        j.student_name\n        # frappe.msgprint(str(j.student_name))\n        fees=frappe.get_list('Fees',filters={'student_name':j.student_name,'fee_structure':fs,'docstatus':1,'outstanding_amount':['>',0]})\n        # frappe.msgprint(str(fees))\n        for k in fees:\n            X=k.name\n            # frappe.msgprint(str(X))\n            NEWfees=frappe.get_doc('Fees',X)\n            # frappe.msgprint(str(NEWfees))\n            feeslist.append(NEWfees)\nfor l in feeslist:\n    frappe.msgprint(str(l.student_name))\n                \n            \n            \n\n\n            \n\n\n\n            \n\n\n\n\n        \n\n\n\n\n            \n\n    \n\n    \n    \n    \n\n    \n\n   \n    \n    \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-16 14:56:23.918675",
  "module": "Education",
  "name": "setunpaid",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Total Unpaid Students",
  "script": "child_table_data = []\ntotal_1 = 0\ntotal_fees_count = 0\ndata = []\nstudents = []\nkl=[]\ncourse_fee=None\npaid_mnt = None\ngrandtotal=None\n\nstudent_group_table=doc.student_groups\nfrappe.msgprint(str(student_group_table))\n\ngroup=frappe.get_doc('Student Group',student_group_table)\nfrappe.msgprint(str(group.students))\n\nfor i in group.students:\n    # frappe.msgprint(str(i.student_name))\n    \n    students.append(i.student_name)\n    \n    fees1=frappe.get_list('Fees',filters={'student_name':i.student_name,'docstatus':1,'outstanding_amount': ['>',0]})\n    # frappe.msgprint(str(fees1))\n\n    if not fees1:\n        doc.set('custom_unpaid_students',[])\n    else:   \n\n        for j in fees1:\n            # frappe.msgprint(str(j.name))\n            s=frappe.get_doc('Fees',j.name)\n            # frappe.msgprint(str(s.grand_total))\n            data.append(s)\n            course_fee=s.grand_total\ndoc.coursefee=course_fee\n# frappe.msgprint(str(data))\nfor k in data:\n    # frappe.msgprint(str(k.student_name))\n    # frappe.msgprint(str(k.outstanding_amount))\n    student_name=k.student_name\n    student_amount=k.outstanding_amount\n    paid_mnt=course_fee-student_amount\n    grandtotal = k.grand_total\n    # frappe.msgprint(str(paid_mnt))\n    # frappe.msgprint(str(grandtotal))\n\n    \n\n    \n\n    child_table_data.append({\n            'student_name': student_name,\n            'outstanding_amount': student_amount,\n            'paid_amount': paid_mnt,\n            'Course_fee' : grandtotal\n            })\n\nfor data in child_table_data:\n    if data not in kl:\n        kl.append(data)\n\n# frappe.msgprint(str(kl))\n# frappe.msgprint(str(len(students)))\ndoc.totstudents=len(students)\n\n    \nif  kl:\n    doc.set('custom_unpaid_students',[])\n    \n    for data in kl:\n        row = doc.append('custom_unpaid_students', {})\n        row.studentnam_e = data['student_name']\n        row.amounts = data['outstanding_amount']\n        row.paid_amount = data['paid_amount']\n        row.course_fee = data['Course_fee']\n        row.save()\n        \n        total_1=total_1+data['outstanding_amount']\n        \nfrappe.msgprint(str(total_1))\ndoc.total_unpaid_amount= total_1\n\n    \n\n\n\n        \n        \n\n        \n        \n\n        \n\n\n    \n\n    \n\n    \n\n# for j in c:\n#     group=frappe.get_doc('Student Group',j)\n#     students=group.students\n    \n#     for k in students:\n#         # frappe.msgprint(str(k.student_name))\n    \n#         fees_count=frappe.get_list('Fees',filters={'student_name':k.student_name,'outstanding_amount': ['>',0]})\n#         frappe.msgprint(str(fees_count))\n#         # total_fees_count=(len(fees_count))+total_fees_count\n#         if fees_count:\n#             unpaid_students.append(k.student_name)  \n#             # frappe.msgprint(str(unpaid_students)\n#             # frappe.msgprint(str(total_fees_count))\n#             #  ....................................................\n#         for w in fees_count:\n#             kk = frappe.get_doc('Fees', w.name)\n#             outstanding_amount = kk.outstanding_amount\n#             student__name = kk.student_name\n#             # frappe.msgprint(str(student__name))\n#             # frappe.msgprint(str(outstanding_amount))\n\n#             child_table_data.append({\n#             'student_name': student__name,\n#             'outstanding_amount': outstanding_amount\n#             }) \n#             total_1 = total_1+outstanding_amount        \n# # frappe.msgprint(str(total_1)) \n# doc.custom_total_amount= total_1\n                      \n                \n# if  child_table_data:\n#     doc.set('custom_unpaid_students',[])\n    \n#     for data in child_table_data:\n#         row = doc.append('custom_unpaid_students', {})\n#         row.studentnam_e = data['student_name']\n#         row.amounts = data['outstanding_amount']\n#         row.save()  \n\n\n    \n    \n\n\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-25 13:09:28.988112",
  "module": "Education",
  "name": "Course Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Status",
  "script": "\ntopics_l = []\nar =[]\n\ntime = None\nG = None\nG = doc.student_group\nfrappe.msgprint(str(G))\n# group = frappe.get_doc('Student Group',G)\n# # frappe.msgprint(str(group.program))\n# pgm = frappe.get_doc('Program',group.program)\n# frappe.msgprint(str(pgm))\n# for i in pgm.courses:\n#     # frappe.msgprint(str(i.course))\n#     course = frappe.get_doc('Course',i.course)\n#     # frappe.msgprint(str(course.topics))\n#     for j in course.topics:\n#         # frappe.msgprint(str(j.topic))\n#         topics_l.append(j.topic)\n        \n# if topics_l:\n#     doc.set('topic_table',[])\n    \n#     for k in topics_l:\n#         row = doc.append('topic_table', {})\n#         # frappe.msgprint(str(k))\n#         row.topics_name = k\n#         row.topics_full_name = k\n\n#         row.save()\n# else:\n#     frappe.msgprint(str('no found'))\n# ///////////////////////////////////////////////////////////////////////////////////////////////////\n\nxx = frappe.get_list('Course Schedule',filters = {'student_group': G})\nS= frappe.get_doc('Course Schedule',G)\nfrappe.msgprint(str(xx))\n\nfor q in xx:\n    # frappe.msgprint(str(q.name))\n    S = q.name\n    # frappe.msgprint(str(S))\n    yy = frappe.get_doc('Course Schedule',S)\n    \n    # frappe.msgprint(str(yy.from_time))\n    # frappe.msgprint(str(yy.to_time))\n    \n    time = yy.to_time-yy.from_time\n    \n    # frappe.msgprint(str(time))\n    ar.append(time)\n    \n# for i in ar:\n#     allowed_time=i\n#     .append({\n#         'newtime':allowed_time\n#     })\n    # ...................................\n# for i in ar:\n#     for l in doc.topic_table:\n#         l.num_hours=i\n#         l.save() \n# for i, row in zip(ar, doc.topic_table):\n#     row.num_hours = i\n#     row.save()\n\n# .......................................................",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-11-24 21:26:39.279897",
  "module": "Education",
  "name": "adding_row_to_status _table",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Schedule",
  "script": "# # ........................\nop = []\nar =[]\nA = doc.custom_tueter_table\n# frappe.msgprint(str(A))\nfor i in A:\n    # frappe.msgprint(str(i.topics))\n    if i.topics not in ar: \n        ar.append(i.topics)\n# frappe.msgprint(str(ar))\nB = doc.student_group\ngroup= frappe.get_list('Course Status',filters ={'student_group':B})\n# frappe.msgprint(str(group))\nfor i in group:\n    # frappe.msgprint(str(i.name))\n    C = i.name\n    group_obj = frappe.get_doc('Course Status',C)\n    # frappe.msgprint(str(group_obj.topic_table))\n    for j in group_obj.topic_table:\n        op.append(j.topics_name)\n        # frappe.msgprint(str(j))        \n        # frappe.msgprint(str(j.topics_name))\n        # .......................................\n        for l in op:\n            for k in ar:\n                if k not in op:\n                    j.topics_name = k\n    group_obj.save()\n            \n    #         if k not in [row.topics_name for row in group_obj.topic_table]:\n    #         # Create a new row in topic_table\n    #             new_topic_row = group_obj.append('topic_table', {})\n    #             new_topic_row.topics_name = k\n\n    # # Save the changes to the document\n    # group_obj.save()\n    \n# ............................................................\n\n# group=doc.student_group\n# course=doc.course\n# topics=[]\n\n# table=doc.custom_tueter_table\n# for j in table:\n#     topics.append(j.topics)\n\n\n# course_status=frappe.get_list('Course Status',\n# filters={\n#     'custom_course':course,\n#     'student_group':group\n# }\n# )\n# # frappe.msgprint(str(course_status))\n# for i in course_status:\n#     status=frappe.get_doc('Course Status',i.name)\n#     for k in topics:\n#         for f in status.topic_table:\n#             if k not in f.topics_name:\n#                 f.topics_name=k\n#     status.save()\n       \n            \n        \n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-05 09:46:15.891397",
  "module": "Education",
  "name": "set_doc_name",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Status",
  "script": "# # Assuming this script is attached to your DocType\n\n# # Directly check and set the document name\n# if doc.student_group:\n#     doc.name = f\"{doc.student_group}\"\n# ..................................................\n# Assuming this script is attached to your DocType\n\n# Set the date\nA = frappe.utils.today()\n\n# Check if the student_group field is set\nif doc.student_group:\n    # Set the name of the document based on the student_group value and the current date\n    doc.name = f\"{doc.student_group}\"\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-06 15:12:49.689972",
  "module": "Education",
  "name": "ins_schedule",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Instructor",
  "script": "# # ...................\n# l = []\n# child_table_data = []\n# if doc.custom_schedule:\n#     A = doc.instructor_name\n#     # frappe.msgprint(str(A))\n#     B = frappe.get_list('Course Schedule',filters = {'instructor_name': A})\n#     # frappe.msgprint(str(B))\n#     for i in B:\n#         frappe.msgprint(str(i.name))\n#         l.append(i.name)\n#     for x in l:\n#         C = frappe.get_doc('Course Schedule',x)\n#         frappe.msgprint(str(C.student_group))\n#         frappe.msgprint(str(C.course))\n#         frappe.msgprint(str(C.schedule_date))\n#         frappe.msgprint(str(C.from_time))\n#         frappe.msgprint(str(C.to_time))\n    \n#         child_table_data.append({\n#         'group':C.student_group,\n#         'course':C.course,\n#         'shedule':C.schedule_date,\n#         'from':C.from_time,\n#         'to':C.to_time\n            \n#                 })\n#     if  child_table_data:\n#         doc.set('custom_schedules',[])\n        \n#         for data in child_table_data:\n#             row = doc.append('custom_schedules', {})\n#             row.sg = data['group']\n#             row.crs = data['course']\n#             row.d = data['shedule']\n#             row.st = data['from']\n#             row.et =data['to']\n#             row.save()  \n# ....................................................\n# Assuming this is part of a server script in ERPNext\nif doc.custom_schedule:\n    l = []\n    child_table_data = []\n\n    A = doc.instructor_name\n    B = frappe.get_list('Course Schedule', filters={'instructor_name': A})\n\n    for i in B:\n        frappe.msgprint(str(i.name))\n        l.append(i.name)\n\n    for x in l:\n        C = frappe.get_doc('Course Schedule', x)\n        frappe.msgprint(str(C.student_group))\n        frappe.msgprint(str(C.course))\n        frappe.msgprint(str(C.schedule_date))\n        frappe.msgprint(str(C.from_time))\n        frappe.msgprint(str(C.to_time))\n\n        child_table_data.append({\n            'group': C.student_group,\n            'course': C.course,\n            'shedule': C.schedule_date,\n            'from': C.from_time,\n            'to': C.to_time\n        })\n\n    if child_table_data:\n        doc.set('custom_schedules', [])\n\n        for data in child_table_data:\n            row = doc.append('custom_schedules', {})\n            row.sg = data['group']\n            row.crs = data['course']\n            row.d = data['shedule']\n            row.st = data['from']\n            row.et = data['to']\n \n\n        # doc.save(ignore_permissions=True)\n        \n\n        \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-04 14:40:39.615273",
  "module": "Education",
  "name": "qqqq",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Status",
  "script": "# # ...................\n# A = doc.topic_table\n# for i in A:\n#     frappe.msgprint(str(i.topics_name))\n#     frappe.db.delete('Topic', {'name': i.topics_name}, ignore_permissions=True)\n#     frappe.msgprint(f\"User Permission for {i.user} and {doc.name} deleted.\")\n\nA = doc.topic_table\nfor i in A:\n    topic_doc = frappe.get_doc(\"Topic\", i.topics_name)\n    if topic_doc:\n        frappe.delete_doc(\"Topic\", i.topics_name, ignore_permissions=True)\n        frappe.msgprint(f\"Topic {i.topics_name} deleted.\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-16 16:50:36.842041",
  "module": "Education",
  "name": "unpaid_stud_2",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "# ......................\ntot_unpaid_stud = []\nchild_table_data = []\nnew_group = None\ntt_mnt = 0;\nstudentname = doc.student_name\nprog = doc.program\nbatch = doc.custom_batch\naccount_name = doc.receivable_account \nfrappe.msgprint(str(account_name))\n# frappe.msgprint(str(studentname))\n# frappe.msgprint(str(prog))\n# frappe.msgprint(str(batch))\n\ngroup= frappe.get_list('Student Group',filters={'batch':batch})\n# frappe.msgprint(str(group))\nfor i in group:\n    # frappe.msgprint(str(i.name))\n    new_group = i.name\n    \n    T= frappe.get_list('Total Unpaid Students',filters={'student_groups':i.name})\n    # frappe.msgprint(str(T))\n    # frappe.msgprint(str(len(T)))\n    if len(T)==0:\n        frappe.msgprint(str('No document found'))\n        \n        # Create a new document\n        new_unpaid_doc = frappe.new_doc('Total Unpaid Students')\n        new_unpaid_doc.student_groups = i.name\n        new_unpaid_doc.program = prog\n        new_unpaid_doc.st_grp = i.name\n        new_unpaid_doc.save()\n        \n        new_unpaid_doc1= frappe.get_doc('Total Unpaid Students',new_unpaid_doc.name)\n        # frappe.msgprint(str(new_unpaid_doc))\n    \n        g_total= doc.grand_total\n        outstanding= doc.outstanding_amount\n        paid_amount1= g_total-outstanding    \n    \n        \n        if not new_unpaid_doc1.custom_unpaid_students:\n        # Add values to the child table for the first time\n            new_row = new_unpaid_doc1.append('custom_unpaid_students', {})\n            new_row.studentnam_e = studentname\n            new_row.paid_amount = paid_amount1 # Replace with the desired amount\n            new_row.course_fee = g_total\n            new_row.amounts = outstanding\n            new_row.accounts = account_name\n            new_row.insert()\n        \n            frappe.msgprint(str('New document created successfully and Row updated successfully'))\n            \n            \n                \n        for k in new_unpaid_doc1.custom_unpaid_students:\n            tt_mnt = tt_mnt + k.amounts\n            new_unpaid_doc1.total_outstanding = tt_mnt;\n            new_unpaid_doc1.save()\n            \n        # else:\n        #     frappe.msgprint('doc already exsist')\n            \n    # else:\n        \n    #     frappe.msgprint(str('Document found'))\n\n    #     for j in T:\n    #         unpaid_doc= frappe.get_doc('Total Unpaid Students',j.name)\n    #         frappe.msgprint(str(unpaid_doc))\n    #         for k in unpaid_doc.custom_unpaid_students:\n    #             frappe.msgprint(k.studentnam_e)\n    #             if k.studentnam_e == studentname:\n    #                 g_total= doc.grand_total\n    #                 outstanding= doc.outstanding_amount\n    #                 paid_amount1= g_total-outstanding\n    #                 k.studentnam_e= studentname\n    #                 k.paid_amount = paid_amount1\n    #                 k.course_fee = g_total\n    #                 k.amounts = outstanding\n    #         unpaid_doc.save()\n    #         frappe.msgprint('Row updated successfully.')\n# ................................................................................   \n\n\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-16 16:36:48.543876",
  "module": "Education",
  "name": "unpaid_stud_1",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "tot_unpaid_stud = []\nchild_table_data = []\nnew_group = None\nM = None\nN = None\ntt_mnt = 0;\nstudname = []\nstud_accounts = []\nstudentname = doc.student_name\nprog = doc.program\nbatch = doc.custom_batch\nstudent_account = doc.receivable_account\nfrappe.msgprint(str(studentname))\nfrappe.msgprint(str(prog))\nfrappe.msgprint(str(batch))\n\ngroup= frappe.get_list('Student Group',filters={'batch':batch})\n# frappe.msgprint(str(group))\nfor i in group:\n    # frappe.msgprint(str(i.name))\n    N = i.name\n    \nT= frappe.get_list('Total Unpaid Students',filters={'student_groups':N})\n\nif len(T)==1:\n    # frappe.msgprint(str('doc found'))\n    for j in T:\n        # frappe.msgprint(str(j.name))\n        M = j.name\n            \n            \n    student_doc = frappe.get_doc('Total Unpaid Students',M)\n    for i in student_doc.custom_unpaid_students:\n        studname.append(i.studentnam_e)\n        stud_accounts.append(i.accounts)\n    if student_account not in stud_accounts:\n        g_total= doc.grand_total\n        outstanding= doc.outstanding_amount\n        paid_amount1= g_total-outstanding\n                    \n        new_row = student_doc.append('custom_unpaid_students', {})\n        new_row.studentnam_e = studentname\n        new_row.course_fee = g_total\n        new_row.paid_amount = paid_amount1\n        new_row.amounts = outstanding\n        new_row.accounts = student_account\n        new_row.save()\n        frappe.msgprint(str('Row Added Successfully'))\n        \n        \n        \n    for k in student_doc.custom_unpaid_students:\n        tt_mnt = tt_mnt + k.amounts\n    student_doc.total_outstanding = tt_mnt;\n    student_doc.save()\n        \n        \n    # tt_mnt = student_doc.total_outstanding\n    # frappe.msgprint(str(tt_mnt))\n    # tt_mnt = tt_mnt + outstanding\n    # student_doc.total_outstanding = tt_mnt\n    \n        \n        \n    # else:\n    #     frappe.msgprint(str('already exsist'))\n    #     for k in student_doc.custom_unpaid_students:\n    #         frappe.msgprint(k.studentnam_e)\n    #         if k.studentnam_e == studentname:\n    #             g_total= doc.grand_total\n    #             outstanding= doc.outstanding_amount\n    #             paid_amount1= g_total-outstanding\n    #             k.studentnam_e= studentname\n    #             k.paid_amount = paid_amount1\n    #             k.course_fee = g_total\n    #             k.amounts = outstanding\n    #             k.save()\n    #     frappe.msgprint('Row updated successfully.')\n        \n        \n        \n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-01 14:51:14.033483",
  "module": "Education",
  "name": "pay",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payment Entry",
  "script": "# .............\npartyname = doc.party_name\nreferences = doc.references\nparty_acc= doc.paid_from\nR_name = None\ngroup = None\ntotal_amount=0\ntotal_paid_mnt=0\n# frappe.msgprint(str(partyname))\n# frappe.msgprint(str(references))\nif references:\n    for i in references:\n        # frappe.msgprint(str(i.reference_name))\n        R_name = i.reference_name\n    fees= frappe.get_doc('Fees',R_name)\n    # frappe.msgprint(str(fees.student_name))\n    \n    # frappe.msgprint(str(fees.outstanding_amount))\n    outstanding_amount= fees.outstanding_amount\n    \n    frappe.msgprint(str(fees.grand_total))\n    total = fees.grand_total\n    \n    paid_amount =total - outstanding_amount\n    # frappe.msgprint(str(fees.custom_batch))\n    \n    \n    groups= frappe.get_list('Student Group',filters={'batch':fees.custom_batch})\n    # frappe.msgprint(str(groups))\n    for j in groups:\n        group=j.name\n    # frappe.msgprint(str(group))\n    unpaid_doc= frappe.get_list('Total Unpaid Students',filters={'student_groups':group})\n    # frappe.msgprint(str(unpaid_doc))\n    new_unpaid_doc=frappe.get_doc('Total Unpaid Students',unpaid_doc)\n    # frappe.msgprint(str(new_unpaid_doc))\n    # frappe.msgprint(str(new_unpaid_doc.total_outstanding))\n    \n    for k in new_unpaid_doc.custom_unpaid_students:\n        # frappe.msgprint(str(k.studentnam_e))\n        if k.accounts == party_acc:\n            k.paid_amount = paid_amount\n            k.course_fee = total\n            k.amounts = outstanding_amount\n            k.accounts = party_acc\n            k.save()\n            frappe.msgprint('Row updated successfully.')\n        \n    for k in new_unpaid_doc.custom_unpaid_students:\n        # frappe.msgprint(str(k.amounts))\n        total_amount  = total_amount+k.amounts\n        total_paid_mnt = total_paid_mnt+k.paid_amount\n    frappe.msgprint(str(total_amount))\n    frappe.msgprint(str(total_paid_mnt))\n    new_unpaid_doc.total_outstanding = total_amount\n    new_unpaid_doc.total_cullected = total_paid_mnt\n    \n        \n    new_unpaid_doc.save()\n# ....................................//\n    # if partyname not in k.studentnam_e:\n    #     new_row = new_unpaid_doc.append('custom_unpaid_students', {})\n    #     new_row.studentnam_e = partyname\n    #     new_row.course_fee = total\n    #     new_row.paid_amount = paid_amount\n    #     new_row.amounts = outstanding_amount\n    #     new_row.save()\n    #     frappe.msgprint(str('Row Added Successfully'))\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-18 10:20:11.906524",
  "module": "Education",
  "name": "batch_setting",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "# ...................\n# BATCH= doc.student_batch\n# doc.custom_batch = BATCH\n\n\nif doc.student_batch:\n      doc.custom_batch = doc.student_batch\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-19 09:24:15.642091",
  "module": "Education",
  "name": "studentgroup_checkmark",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Group",
  "script": "table = doc.students\nfrappe.msgprint(str(table))\n\nfor i in table:\n    stud= frappe.get_doc('Student',i.student)\n    frappe.msgprint(str(stud))\n    if doc.disabled == 1:\n        stud.reason_for_leaving = 'Course Compleated'\n        stud.enabled = 0\n    # elif doc.disabled == 0:\n    #     stud.enabled = 1\n    stud.save()\n\n\n\n# ....................................................../\n\n# table = doc.students\n# student_ids = [row.student for row in table]\n# students = frappe.get_all('Student', filters={'name': ('in', student_ids)}, fields=['name', 'enabled'])\n\n# for student in students:\n#     stud = frappe.get_doc('Student', student.name)\n    \n#     if doc.disabled == 1:\n#         stud.enabled = 0\n#     elif doc.disabled == 0:\n#         stud.enabled = 1\n\n#     stud.save()\n#\n\n\n        \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-02 11:41:07.130071",
  "module": "Education",
  "name": "prevent_duplicate_fees",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "\n# ......................\nStudent_Account = None\nstd = doc.student\nstudent = doc.student_name\nstructure = doc.fee_structure\nprog = doc.program\nbatch = doc.custom_batch\nyear = doc.academic_year\nstd_account = doc.receivable_account\n# frappe.msgprint(str(std_account)) \n\nY = frappe.get_doc(\"Student\",std)\n# frappe.msgprint(str(Y.custom_student_account))\n\nif Y:\n    frappe.msgprint(str(Y.custom_student_account))\n    Student_Account = Y.custom_student_account\n    doc.receivable_account= Student_Account\n\n\n# stud_fees = frappe.get_list('Fees',filters={'student_name':student,'program':prog,'custom_batch':batch,'academic_year':year,'receivable_account':Student_Account})\nstud_fees = frappe.get_list('Fees',filters={'student_name':student,'receivable_account':Student_Account})\n\nfrappe.msgprint(str(len(stud_fees)))\n\nif len(stud_fees) > 0:\n    frappe.throw(\"Fees already exist for this student. Document submission aborted.\")\n    frappe.validate = False\n    \n\n\n\n\n\n\n\n\n\n\n\n\n# ...............................................\n# Student_Account = None\n# student = doc.student_name\n# structure = doc.fee_structure\n# prog = doc.program\n# batch = doc.custom_batch\n# year = doc.academic_year\n# std_account = doc.receivable_account\n# # frappe.msgprint(str(std_account))\n\n# Y = frappe.get_list(\"Student\",filters ={\"student_name\":student})\n# # frappe.msgprint(str(Y))\n# for i in Y:\n#     # frappe.msgprint(str(i.name))\n#     xx = frappe.get_doc('Student' ,i.name)\n#     frappe.msgprint(str(xx.custom_student_account))\n\n#     if xx:\n#         frappe.msgprint(str(xx.custom_student_account))\n#         Student_Account = xx.custom_student_account\n#         doc.receivable_account=xx.custom_student_account\n\n\n# stud_fees = frappe.get_list('Fees',filters={'student_name':student,'program':prog,'custom_batch':batch,'academic_year':year,'receivable_account':Student_Account})\n# frappe.msgprint(str(len(stud_fees)))\n\n# if len(stud_fees) > 0:\n#     frappe.throw(\"Fees already exist for this student. Document submission aborted.\")\n#     frappe.validate = False\n    \n\n\n    \n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-29 17:19:28.613190",
  "module": "Education",
  "name": "prevent_duplicate_fees_from_courseSchedule",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fee Schedule",
  "script": "# ..............................\nstructure = doc.fee_structure\nyear = doc.academic_year\nprog = doc.program\nG = doc.student_groups\ngroup = None\nstd_group_name = []\nfor i in G:\n    # frappe.msgprint(str(i.student_group))\n    grp = frappe.get_doc('Student Group',i.student_group)\n    # frappe.msgprint(str(grp.students))\n    group = grp.students\nfor j in group:\n    # frappe.msgprint(str(j.student_name))\n    std_group_name.append(j.student_name)\nfor k in std_group_name:\n    # frappe.msgprint(str(k))\n    exsist= frappe.get_list(\"Fees\",filters={'student_name': k})  \n    # frappe.msgprint(str(exsist))\n    if len(exsist) > 0:\n        student_group_name = ', '.join([i.student_group for i in G])\n        frappe.throw(f\"Fees already exist for student {k} in the following student group: {student_group_name}. Document submission aborted.\")\n        frappe.validate = False\n        \n        \n        # frappe.throw(f\"Fees already exist for student {k}. Document submission aborted.\")\n    \n\n    \n    \n    \n    \n\n\n\n\n\n\n\n\n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-20 17:03:30.882695",
  "module": "Education",
  "name": "setting_student_fess",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fee Schedule",
  "script": "D=[]\nnum_students=[]\nnew_students=[]\npg_en = []\nnew_pg_en = None\ntable_1 = doc.student_groups\n# frappe.msgprint(str(table_1))\n\n\nfor i in table_1:\n    frappe.msgprint(str(i.student_group))\n    # frappe.msgprint(str(i.total_students))\ngroup = frappe.get_doc('Student Group',i.student_group)\n# frappe.msgprint(str(group.students))\nfor j in group.students:\n    # frappe.msgprint(str(j.student_name))\n    D.append(j.student_name)\n    std_fees= frappe.get_list('Fees',filters={'student_name':j.student_name})\n    # frappe.msgprint(str(std_fees))\n    for k in std_fees:\n        # frappe.msgprint(str(k.name))\n        fees= frappe.get_doc('Fees',k.name)\n        # frappe.msgprint(str(fees))\n        num_students.append(fees.student_name)\n\nfor i in D:\n    found = False\n    for j in num_students:\n        if i == j:\n            found = True\n            break\n    if not found:\n        new_students.append(i)\nfrappe.msgprint(f\"Students without fees: {new_students}\")\n# for student_name in new_students:\n#     program_enrollments = frappe.get_all('Program Enrollment', filters={'student_name': student_name})\n#     frappe.msgprint(str(program_enrollments ))\n    \n\n    # for enrollment in program_enrollments:\n    #     new_fee = frappe.new_doc(\"Fees\")\n    #     new_fee.student = student_name\n    #     new_fee.student_name = student_name\n    #     new_fee.batch = 'X1'\n    #     new_fee.institution = 'webeaz'\n    #     new_fee.posting_date = frappe.utils.nowdate()\n    #     new_fee.posting_time = frappe.utils.nowtime()\n    #     new_fee.due_date = frappe.utils.nowdate()\n    #     new_fee.program_enrollment = enrollment.name\n    #     new_fee.program = doc.program\n    #     new_fee.academic_year = doc.academic_year\n    #     new_fee.fee_structure = doc.fee_structure\n    #     new_fee.receivable_account = f\"{student_name} - W\"\n    #     new_fee.cost_center = 'Main - W'\n    #     new_fee.income_account = 'Sales - W'\n    #     new_fee.append('components', {'fee_category': 'Category1', 'amount': 30000})\n    #     new_fee.insert()\n\n    # frappe.msgprint(f\"Created fees for students without fees: {new_students}\")\n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # .........................\n    # std_P_E= frappe.get_all('Program Enrollment',filters={'student_name':i})\n#     # frappe.msgprint(str(std_P_E))\n    \n#     for enrollment in std_P_E:\n#         # frappe.msgprint(str(enrollment.name))\n#         prog_std = frappe.get_doc(\"Program Enrollment\",enrollment.name)\n#         # frappe.msgprint(str(prog_std.name))\n        \n\n        \n#         pg_en.append(prog_std.name)\n# frappe.msgprint(f\"Students without fees: {pg_en}\")\n\n# # frappe.msgprint(str(pg_en))\n# for l in pg_en:\n#     frappe.msgprint(str(l))\n\n    \n#     new_fee = frappe.new_doc(\"Fees\")\n#     new_fee.student = 'Alexandere Dm'\n#     new_fee.student_name = 'Alexandere Dm'\n#     new_fee.batch = 'X1'\n#     new_fee.institution = 'webeaz'\n#     new_fee.posting_date = frappe.utils.nowdate()\n#     new_fee.posting_time = frappe.utils.nowtime()\n#     new_fee.due_date = frappe.utils.nowdate()\n#     new_fee.program_enrollment = l\n#     new_fee.program = doc.program\n#     new_fee.academic_year = doc.academic_year\n#     new_fee.fee_structure =  doc.fee_structure\n#     new_fee.fee_schedule = 'EDU-FSH-2023-00091'\n#     new_fee.receivable_account = \"Alexandere Dm - W\"  \n#     new_fee.cost_center = 'Main - W'\n#     new_fee.income_account = 'Sales - W'\n#     new_fee.append('components', {'fee_category': 'Category1', 'amount': 100})\n        \n#     new_fee.insert()\n# # .....\n# enrollment_id = \"EDU-ENR-2023-00073\"\n\n# frappe.msgprint(f\"Creating fees for enrollment ID: {enrollment_id}\")\n\n# new_fee = frappe.new_doc(\"Fees\")\n# new_fee.student = 'Sayon M'\n# new_fee.student_name = 'Sayon M'\n# new_fee.batch = 'A1'\n# new_fee.institution = 'webeaz'\n# new_fee.posting_date = frappe.utils.nowdate()\n# new_fee.posting_time = frappe.utils.nowtime()\n# new_fee.due_date = frappe.utils.nowdate()\n# new_fee.program_enrollment = enrollment_id\n# new_fee.program = doc.program\n# new_fee.academic_year = doc.academic_year\n# new_fee.fee_structure =  doc.fee_structure\n# new_fee.fee_schedule = 'EDU-FSH-2023-00024'\n# new_fee.receivable_account = \"Sayon M - W\"  \n# new_fee.cost_center = 'Main - W'\n# new_fee.income_account = 'Sales - W'\n# new_fee.append('components', {'fee_category': 'Course Fee', 'amount': 40000})\n\n# # // Debugging message\n# # frappe.msgprint(\"Inserting Fees document...\")\n\n# new_fee.insert()\n\n# # // Debugging message\n# frappe.msgprint(\"Fees document inserted successfully.\")\n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-21 13:53:07.535278",
  "module": "Education",
  "name": "std_time_table",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Schedule",
  "script": "# .\ngroup = doc.student_group\ncourse = doc.course\ninstructor = doc.instructor_name\nsheduled_date = doc.schedule_date\ncourse = doc.course\nRooM = doc.room\ncs_list = []\ncs_details = []\ncs= frappe.get_list(\"Course Schedule\",filters = {'student_group':group})\nfrappe.msgprint(str(cs))\n\n\nfor  i in cs:\n    # frappe.msgprint(str(i.name))\n    new_cs= frappe.get_doc(\"Course Schedule\",i.name)\n\n    cs_details.append({'instructor_name': new_cs.instructor_name,\n                        'schedule_date': new_cs.schedule_date,\n                        'from_time': new_cs.from_time,\n                        'to_time': new_cs.to_time,\n                        'room': new_cs.room})\n    \n\n\nsorted_cs_list = sorted(cs_details, key=lambda x: x['schedule_date'])\n# for i in sorted_cs_list:\n#     frappe.msgprint(str(i))\n\nbatches = frappe.get_doc('Student Group',group)\nBatch = batches.batch\nStudent_group = frappe.get_list(\"Student Time Table\",filters={\"st_gp\":group,\"cours\":course})\nfrappe.msgprint(str(len(Student_group)))\nif len(Student_group) == 0:\n    frappe.msgprint(str('No Doc Found'))\n\n\n    new_std_gp = frappe.new_doc('Student Time Table')\n    new_std_gp.std_grp = group\n    new_std_gp.batch = Batch\n    new_std_gp.cours = course\n    new_std_gp.st_gp = group\n    new_std_gp.save()\n    frappe.msgprint(str('Created New Doc'))\n\n    current_doc= frappe.get_doc(\"Student Time Table\",group)\n\n    if not current_doc.table_1:\n        for i in sorted_cs_list:\n            new_row = current_doc.append('table_1', {})\n            new_row.instructor_name = i['instructor_name']\n            new_row.schedule_date = i['schedule_date'] \n            new_row.room = i['room']\n            new_row.from_time = i['from_time']\n            new_row.to_time = i['to_time']  \n            new_row.insert()\n            frappe.msgprint(str('Row updated successfully'))\n\n\n\nelif len(Student_group) > 0:\n\n\n    current_doc = frappe.get_doc(\"Student Time Table\", group)\n\n#\n    if current_doc.table_1:\n        current_doc.set('table_1', [])\n        for i in sorted_cs_list:\n            new_row = current_doc.append('table_1', {})\n            new_row.instructor_name = i['instructor_name']\n            new_row.schedule_date = i['schedule_date'] \n            new_row.room = i['room']\n            new_row.from_time = i['from_time']\n            new_row.to_time = i['to_time']  \n            new_row.insert()\n            frappe.msgprint(str('Row updated successfully'))\n    current_doc.save()\n            \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-21 13:53:17.390321",
  "module": "Education",
  "name": "ins_c_status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Schedule",
  "script": "# .\ngroup= doc.student_group\ncourse = doc.course\ntopics = []\ngrp = frappe.get_list(\"Course Status\",filters = {'student_group':group})\nfrappe.msgprint(str(len(grp)))\n\nif len(grp) ==0:\n\n    crs_sts_grp = frappe.new_doc('Course Status')\n    crs_sts_grp.student_group = group\n    crs_sts_grp.course_name = course\n    crs_sts_grp.save()\n    \n    crs_sts_grp= frappe.get_doc('Course Status',group)\n    frappe.msgprint(str(crs_sts_grp.topic_table))\n    \n    for topic_name in topics:\n        # Create a new row in the topic_table\n        new_row = crs_sts_grp.append('topic_table', {\n            'topics_name': topic_name,\n            'topics_full_name': topic_name\n        })\n        new_row.insert()\n        new_row.save()\n\n    # Save the new Course Status document\n\n    doc.save()\n\n    frappe.msgprint('New document created successfully, and rows updated successfully')\n\n\nif len(grp) > 0:\n    crse = frappe.get_doc(\"Course\", course)\n    topics = [i.topic_name for i in crse.topics]\n\n    crs_sts_grp = frappe.get_doc('Course Status', group)\n    frappe.msgprint(str(crs_sts_grp.topic_table))\n\n    # Check if the topic is not already in the table (optional, depending on your requirements)\n    for topic_name in topics:\n        if topic_name not in [row.topics_name for row in crs_sts_grp.topic_table]:\n            # Create a new row in the topic_table\n            row = crs_sts_grp.append('topic_table', {\n                'topics_name': topic_name,\n                'topics_full_name': topic_name\n            })\n            row.insert()\n\n    # Save the changes to the Course Status document\n    crs_sts_grp.save()\n    frappe.msgprint('New row added successfully')\n\n\n\n\n\n\n# .................................\n# if len(grp) > 0:\n#     crse= frappe.get_doc(\"Course\",course)\n#     # frappe.msgprint(str(crse.topics))\n#     for i in crse.topics:\n#         # frappe.msgprint(str(i.topic_name))\n#         topics.append(i.topic_name)\n\n#     crs_sts_grp= frappe.get_doc('Course Status',group)\n#     frappe.msgprint(str(crs_sts_grp.topic_table))\n#     for topic_name in topics:\n#         # Create a new row in the topic_table\n#         row = crs_sts_grp.append('topic_table', {})\n        \n#         # Set the topics_name field in the new row\n#         row.topics_name = topic_name\n#         row.topics_full_name = topic_name\n    \n#     # Save the changes to the Course Status document\n#     crs_sts_grp.save()\n\n    \n    \n\n\n\n    \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "d",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2023-12-31 15:03:38.223742",
  "module": "Education",
  "name": "batch_setting_api",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "# .//\ncc=frappe.form_dict.name1\nstd_progm = frappe.get_doc('Program Enrollment',cc)\nfrappe.msgprint(str(std_progm.student_batch_name))\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-02 11:33:42.853509",
  "module": "Education",
  "name": "batch_setting_in_fees",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fees",
  "script": "# ...\nprogram_enrollment = doc.program_enrollment\nstd_program_enrollment = frappe.get_doc('Program Enrollment',program_enrollment)\nfrappe.msgprint(str(std_program_enrollment.student_batch_name))\ndoc.custom_batch = std_program_enrollment.student_batch_name",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-07 12:15:35.087063",
  "module": "Education",
  "name": "Userpermission _setting",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student",
  "script": "# .\n\ngmail_name = doc.user\nif gmail_name == doc.user:\n    new_permission = frappe.new_doc(\"User Permission\")\n    new_permission.user = gmail_name\n    new_permission.allow = \"Student\"\n    new_permission.for_value = doc.name  # Use doc.name instead of \"doc.name\"\n    new_permission.insert()\n    frappe.msgprint(\"User permission created successfully.\")\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-22 11:56:00.534976",
  "module": "Education",
  "name": "User_Permission_for_student",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Program Enrollment",
  "script": "# .\nstudent_group_name = None\nstudent = doc.student\nstudentName = doc.student_name\nprogram = doc.program\nyear = doc.academic_year\nbatch = doc.student_batch_name\n\n# frappe.msgprint(str(student))\n\n\nstud = frappe.get_doc(\"Student\",student)\nif stud:\n    # frappe.msgprint(str(stud.user))\n    # frappe.msgprint(str(stud.custom_student_account))\n    gmail_name = stud.user\n    \nelse:\n    frappe.msgprint(\"Student not found.\")\n    \nnew_permission = frappe.new_doc(\"User Permission\")\nnew_permission.user = gmail_name\nnew_permission.allow = \"Student\"\nnew_permission.for_value = student  # Use doc.name instead of \"doc.name\"\nnew_permission.insert()\nfrappe.msgprint(\"Student User permission created successfully.*\")\n\n\n\nnew_permission = frappe.new_doc(\"User Permission\")\nnew_permission.user = gmail_name\nnew_permission.allow = \"Student Batch Name\"\nnew_permission.for_value = batch  # Use doc.name instead of \"doc.name\"\nnew_permission.insert()\nfrappe.msgprint(\"Student Batch Name User permission created successfully.*\")\n\nstudent_group = frappe.get_list(\"Student Group\",filters={'batch':batch})\n# frappe.msgprint(str(student_group))\nfor i in student_group:\n    frappe.msgprint(str(i.name))\n    StudentGroup = frappe.get_doc(\"Student Group\",i.name)\n    frappe.msgprint(str(StudentGroup.instructors))\n    for j in StudentGroup.instructors:\n        frappe.msgprint(str(j.instructor))\n\n        new_permission = frappe.new_doc(\"User Permission\")\n        new_permission.user = gmail_name\n        new_permission.allow = \"Instructor\"\n        new_permission.for_value = j.instructor # Use doc.name instead of \"doc.name\"\n        new_permission.insert()\n        frappe.msgprint(\"Instructor User permission created successfully.*\")\n\n\n    new_permission = frappe.new_doc(\"User Permission\")\n    new_permission.user = gmail_name\n    new_permission.allow = \"Program\"\n    new_permission.for_value = StudentGroup.program  # Use doc.name instead of \"doc.name\"\n    new_permission.insert()\n    frappe.msgprint(\"Program User permission created successfully.*\")\n    \n    # new_permission = frappe.new_doc(\"User Permission\")\n    # new_permission.user = gmail_name\n    # new_permission.allow = \"Student Time Table\"\n    # new_permission.for_value = i.name  # Use doc.name instead of \"doc.name\"\n    # new_permission.insert()\n    # frappe.msgprint(\"Student Time Table permission created successfully.*\")\n        \n    program = frappe.get_doc(\"Program\",StudentGroup.program)\n    # frappe.msgprint(str(program.courses))\n    for k in program.courses:\n        new_permission = frappe.new_doc(\"User Permission\")\n        new_permission.user = gmail_name\n        new_permission.allow = \"Course\"\n        new_permission.for_value = k.course  # Use doc.name instead of \"doc.name\"\n        new_permission.insert()\n        frappe.msgprint(\"Course permission created successfully.*\")\n        \n        \n\n    \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-21 13:23:01.619532",
  "module": "Education",
  "name": "Instructor_user_permission",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Instructor",
  "script": "ins_name = doc.instructor_name\nemp = doc.employee\nins_id = None\n\nmon = frappe.get_doc('Employee',emp)\nfrappe.msgprint(str(mon.custom_email))\ngmail_name = mon.custom_email\n\nins = frappe.get_list(\"Instructor\",filters = {\"instructor_name\":ins_name})\nfrappe.msgprint(str(ins))\nfor j in ins:\n    # frappe.msgprint(str(j.name))\n    ins_id = j.name\n    \n    new_permission = frappe.new_doc(\"User Permission\")\n    new_permission.user = gmail_name\n    new_permission.allow = \"Instructor\"\n    new_permission.for_value = j.name  # Use doc.name instead of \"doc.name\"\n    new_permission.insert()\n    frappe.msgprint(\"Instructor User permission created successfully.*\")\n\n    \n    \n    \nlog = doc.instructor_log\nfrappe.msgprint(str(log))\nfor j in log:\n    # frappe.msgprint(str(j.program))\n    \n\n    new_permission = frappe.new_doc(\"User Permission\")\n    new_permission.user = gmail_name\n    new_permission.allow = \"Program\"\n    new_permission.for_value = j.program  # Use doc.name instead of \"doc.name\"\n    new_permission.insert()\n    frappe.msgprint(\"Program User permission created successfully.*\")\n    \n    \n    new_permission = frappe.new_doc(\"User Permission\")\n    new_permission.user = gmail_name\n    new_permission.allow = \"Course\"\n    new_permission.for_value = j.course  # Use doc.name instead of \"doc.name\"\n    new_permission.insert()\n    frappe.msgprint(\"Course User permission created successfully.*\")\n\n# stg= frappe.get_list(\"Student Group\",filters = {'instructor_name':ins_name})\n# frappe.msgprint(str(stg))\n# for k in stg:\n#     frappe.msgprint(str(k.name))\n\n#     new_permission = frappe.new_doc(\"User Permission\")\n#     new_permission.user = gmail_name\n#     new_permission.allow = \"Instructor_Time_Table\"\n#     new_permission.for_value = k.name  # Use doc.name instead of \"doc.name\"\n#     new_permission.insert()\n#     frappe.msgprint(\"Instructor Time Table User permission created successfully.\")\n    \n    \n    \n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-21 13:53:25.330127",
  "module": "Education",
  "name": "Instructor_time_table",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Course Schedule",
  "script": "# .\nstudentgroup = doc.student_group\ncourse = doc.course\ngroup = frappe.get_doc(\"Student Group\",studentgroup)\n# frappe.msgprint(str(group.batch))\ndoc_name = None\ncs_details = []\n\n\ncourse_schedules = frappe.get_list(\"Course Schedule\",filters ={\"student_group\":studentgroup})\n# frappe.msgprint(str(course_schedules))\nfor k in course_schedules:\n    # frappe.msgprint(str(k.name))\n    schedules= frappe.get_doc(\"Course Schedule\",k.name)\n    # frappe.msgprint(str(schedules.instructor_name))\n    # frappe.msgprint(str(schedules.schedule_date))\n    # frappe.msgprint(str(schedules.room))\n    # frappe.msgprint(str(schedules.from_time))\n    # frappe.msgprint(str(schedules.to_time))\n    cs_details.append({\n                        \"ins_Name\":schedules.instructor_name,\n                        \"sch_date\":schedules.schedule_date,\n                        \"sch_room\":schedules.room,\n                        \"sch_from_time\":schedules.from_time,\n                        \"sch_to_time\":schedules.to_time\n    })\nsorted_cs_list = sorted(cs_details, key=lambda x: x['sch_date'])\n# frappe.msgprint(str(sorted_cs_list)\n\nins_table = frappe.get_list(\"Instructor_Time_Table\",filters = {\"std_group\":studentgroup})\n# frappe.msgprint(str(ins_table))\nfrappe.msgprint(str(len(ins_table)))\nif len(ins_table) > 0:\n    frappe.msgprint(str(\"Doc Found\"))\n    for i in ins_table:\n        frappe.msgprint(str(i.name))\n        doc_name = i.name\n    ins_group = frappe.get_doc(\"Instructor_Time_Table\",doc_name)\n    # frappe.msgprint(str(group.ins_schedule_table))\n    ins_group.set(\"ins_schedule_table\",[])\n    for k in sorted_cs_list:\n        new_row = ins_group.append(\"ins_schedule_table\",{})\n        new_row.instructor_name = k['ins_Name']\n        new_row.schedule_date = k[\"sch_date\"]\n        new_row.room = k[\"sch_room\"]\n        new_row.from_time = k['sch_from_time']\n        new_row.to_time = k['sch_to_time']\n        new_row.insert()\n    ins_group.save()\n    frappe.msgprint(str(\"New Row Updated Sucessfully\"))\n    \n    \nelif len(ins_table) == 0:\n    frappe.msgprint(str(\"Doc Not Found\"))\n    \n    G = frappe.get_doc(\"Student Group\",studentgroup)\n    frappe.msgprint(str(G.batch))\n    \n    new_group = frappe.new_doc(\"Instructor_Time_Table\")\n    new_group.std_group = studentgroup\n    new_group.stud_group = studentgroup\n    new_group.course = course\n    new_group.batch = G.batch\n    new_group.save()\n    \n    frappe.msgprint(str(\"New Document Created \"))\n    \n    NEW_grp = frappe.get_doc(\"Instructor_Time_Table\",studentgroup)\n    # frappe.msgprint(str(NEW_grp.ins_schedule_table))\n    NEW_grp.set('ins_schedule_table',[])\n    for j in sorted_cs_list:\n        new_row = NEW_grp.append(\"ins_schedule_table\",{})\n        new_row.instructor_name = j['ins_Name']\n        new_row.schedule_date = j['sch_date']\n        new_row.room = j['sch_room']\n        new_row.from_time = j['sch_from_time']\n        new_row.to_time = j['sch_to_time']\n    frappe.msgprint(str('Row updated successfully'))\n    NEW_grp.save()\n            \n            \n        \n    \n    \n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "advance",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-17 14:59:13.123579",
  "module": "Education",
  "name": "advance",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Fee Structure",
  "script": "l=None\ncc=frappe.form_dict.name1\nfeestructure= frappe.get_list(\"Fee Structure\",filters={\"program\":cc})\n# frappe.msgprint(str(feestructure))\nfor i in feestructure:\n    # frappe.msgprint(str(i.name))\n    l = i.name\nA = frappe.get_doc(\"Fee Structure\",l)\n\nfor j in A.components:\n    frappe.msgprint(str(j.amount))\n    # console.log(j.amount)\n    # frappe.logger.info(j.amount)\n\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-17 12:12:23.060237",
  "module": "Education",
  "name": "Lead Status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Applicant",
  "script": "lead = doc.custom_lead\nlead_opp = doc.custom_opp_name\n\nif doc.paid == 1:\n    # Update Lead status\n    lead_doc = frappe.get_doc(\"Lead\", lead)\n    if lead_doc:\n        frappe.db.set_value(\"Lead\", lead, \"status\", \"Converted\")\n    else:\n        frappe.msgprint(f\"Lead {lead} not found!\")\n\n    # Update Opportunity status\n    opp_doc = frappe.get_doc(\"Opportunity\", lead_opp)\n    if opp_doc:\n        frappe.db.set_value(\"Opportunity\", lead_opp, \"status\", \"Converted\")\n    else:\n        frappe.msgprint(f\"Opportunity {lead_opp} not found!\")\n\n\n# ../\n# lead = doc.custom_lead\n# lead_opp = doc.custom_opp_name\n\n# # frappe.msgprint(str(lead))\n# # frappe.msgprint(str(lead_opp))\n# if doc.paid == 1:\n\n#     leads = frappe.get_doc(\"Lead\", lead)\n#     frappe.db.set_value(\"Lead\",lead,\"status\",\"Converted\")\n    \n#     Oppertunity_doc = frappe.get_doc(\"Opportunity\",lead_opp)\n#     frappe.db.set_value(\"Opportunity\",lead_opp,\"status\",\"Converted\")\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-01-29 21:45:51.650718",
  "module": "Education",
  "name": "new student account creation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student",
  "script": "student_name = doc.name\n\n# Check if an account with the same name already exists\nexisting_account = frappe.get_all(\"Account\", filters={\"account_name\": student_name})\n\nif existing_account:\n    frappe.msgprint(\"Account already exists.\")\n    doc.custom_student_account = existing_account[0].name\nelse:\n    # Create a new account with the student's name\n    new_account = frappe.new_doc(\"Account\")\n    new_account.account_name = student_name\n    new_account.parent_account = \"Temporary Accounts - W\"\n    new_account.account_type = \"Receivable\"\n    new_account.insert()\n    \n    frappe.msgprint(\"New account created successfully.\")\n    doc.custom_student_account = new_account.name\n\nfrappe.msgprint(str(doc.custom_student_account))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-06 14:50:45.528768",
  "module": "Education",
  "name": "Temperory account",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Applicant",
  "script": "first_name = doc.first_name\nmiddle_name = doc.middle_name\nlast_name = doc.last_name\nN_name = doc.name\n# frappe.msgprint(str(lead))\nlast_five_digits = N_name[-5:]\n\n# Convert the last 5 digits to an integer (if needed)\nId = int(last_five_digits)\n\n# frappe.msgprint(f\"Last 5 digits: {last_five_digits}, Converted Id: {Id}\")\n\n\n# Concatenate the names to form the full name\nfull_name = \" \".join([name for name in [first_name, middle_name, last_name] if name])\n\nif doc.custom_create_account ==1:\n    existing_account = frappe.get_all(\"Account\", filters={\"account_name\":full_name+\" - \"+str(Id)})\n    \n    if existing_account:\n        frappe.msgprint(\"Account already exists.\")\n        doc.custom_account = existing_account[0].name\n    else:\n    #     # Create a new account with the student's name\n        new_account = frappe.new_doc(\"Account\")\n        new_account.account_name = full_name+\" - \"+str(Id)\n        new_account.parent_account = \"Temporary Accounts - W\"\n        new_account.insert()\n        \n        frappe.msgprint(\"New account created successfully.\")\n        doc.custom_account = new_account.name\n   \n    \n    frappe.msgprint(str(doc.custom_account))\nelse:\n    frappe.msgprint(\"Account creation skipped because 'Create Account' checkbox is not checked.\")\n    \n        \n# # # ................................\n# student_name = doc.name\n\n# first_name = doc.first_name\n# middle_name = doc.middle_name\n# last_name = doc.last_name\n# lead = doc.custom_lead\n# # frappe.msgprint(str(lead))\n# last_five_digits = lead[-5:]\n\n# # Convert the last 5 digits to an integer (if needed)\n# Id = int(last_five_digits)\n\n# # frappe.msgprint(f\"Last 5 digits: {last_five_digits}, Converted Id: {Id}\")\n\n\n# # Concatenate the names to form the full name\n# full_name = \" \".join([name for name in [first_name, middle_name, last_name] if name])\n\n# if doc.custom_create_account ==1:\n#     existing_account = frappe.get_all(\"Account\", filters={\"account_name\": full_name+' - '+str(Id)})\n\n#     if existing_account:\n#         frappe.msgprint(\"Account already exists.\")\n#         doc.custom_account = existing_account[0].name\n#         doc.save()\n#     else:\n#         new_account = frappe.new_doc(\"Account\")\n#         new_account.account_name = full_name+' - '+str(Id)\n#         new_account.parent_account = \"Temporary Accounts - W\"\n#         new_account.account_type = \"\"\n#         new_account.insert()\n        \n#         frappe.msgprint(\"New account created successfully.\")\n#         doc.custom_account = new_account.name\n# else:\n#     # If \"paid\" checkbox is not checked, display a message and skip account creation\n#     frappe.msgprint(\"Account creation skipped because 'Create Account' checkbox is not checked.\")\n\n# Print the linked account name (for debugging purposes)\n# frappe.msgprint(str(doc.custom_student_account))\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-03 12:42:51.877987",
  "module": "Education",
  "name": "high",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "ToDo",
  "script": "# ./\nD = doc.description\np = doc.priority\nvalue = \"High\"\nfrappe.msgprint(str(D))\nif D:\n    frappe.db.set_value('ToDo', doc.name, 'priority', 'High')\n    frappe.msgprint(str(p))\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-03 12:50:42.453905",
  "module": "Education",
  "name": "testing",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Lead",
  "script": "# .",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-14 11:12:06.560387",
  "module": "Education",
  "name": "temperory  amount",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Payment Entry",
  "script": "new_type = doc.payment_type\nacc_name = doc.paid_from\npaid_amount = doc.paid_amount\naccount_name = None\nprogram = None\nyear = None\nfirst_name = None\nmiddle_name = None\nlast_name = None\nname = None\nstart_year = None\ndata = []\n\n# frappe.msgprint(str(new_type))\n# frappe.msgprint(str(acc_name))\n\nif new_type == \"Internal Transfer\":\n    aci = frappe.get_list('Student Applicant',{'custom_account': acc_name})\n        \n    # frappe.msgprint(str(aci))\n        \n    for applicant in aci:\n        # frappe.msgprint(str(applicant.name))\n        account_name = applicant.name;\n    Student_doc = frappe.get_doc(\"Student Applicant\",account_name)\n    # frappe.msgprint(str(Student_doc))\n    # frappe.msgprint(str(Student_doc.program))\n    program = Student_doc.program\n    first_name = Student_doc.first_name\n    middle_name = Student_doc.middle_name\n    last_name = Student_doc.last_name\n    year =  Student_doc.academic_year\n    aca_doc = frappe.get_doc(\"Academic Year\",year)\n    start_year = aca_doc.year_start_date\n    \n    # frappe.msgprint(str(year))\n    # frappe.msgprint(str(start_year))\n \n\n    T = frappe.get_list(\"Temporary Account Details\",filters = {\"custom_course\":program})\n    frappe.msgprint(str(len(T)))\n    \n    if len(T) == 0:\n        paid_doc = frappe.new_doc('Temporary Account Details')\n        paid_doc.custom_course = program\n        paid_doc.custom_course_1 = program\n        paid_doc.custom_start_year = start_year\n        paid_doc.save()\n    \n        \n        paid_doc_1= frappe.get_doc('Temporary Account Details',paid_doc.name)\n        # frappe.msgprint(str(paid_doc_1.just1))\n        \n        if not paid_doc_1.just1:\n            new_row = paid_doc_1.append('just1',{})\n            new_row.custom_name = (first_name or \"\") + \" \" + (middle_name or \"\") + \" \" + (last_name or \"\")\n            new_row.custom_account = acc_name\n            new_row.custom_amount = paid_amount\n            new_row.insert()\n        frappe.msgprint(str(\"New Doc and Row Created Successfully\"))\n    \n    elif len(T) > 0:\n        paid_doc_1 = frappe.get_doc('Temporary Account Details', program)\n        # frappe.msgprint(str(paid_doc_1.just1))\n    \n        account_found = False\n    \n        for j in paid_doc_1.just1:\n            if acc_name == j.custom_account:\n                account_found = True\n                break\n    \n        if account_found:\n            frappe.throw(\"Account already exists in the document.\")\n    \n        # If the account is not found, create a new row\n        new_row = paid_doc_1.append('just1', {})\n        new_row.custom_account = acc_name\n        new_row.custom_name = (first_name or \"\") + \" \" + (middle_name or \"\") + \" \" + (last_name or \"\")\n        new_row.custom_amount = paid_amount\n        paid_doc_1.save()\n        frappe.msgprint(\"New Row Added Successfully\")\n\n                \n                \n            \n            \n            \n            \n            \n        \n        \n        \n        \n            \n            \n        \n        \n    \n        # g_total= doc.grand_total\n        # outstanding= doc.outstanding_amount\n        # paid_amount1= g_total-outstanding    \n    \n        \n        # if not new_unpaid_doc1.custom_unpaid_students:\n        # # Add values to the child table for the first time\n        #     new_row = new_unpaid_doc1.append('custom_unpaid_students', {})\n        #     new_row.studentnam_e = studentname\n        #     new_row.paid_amount = paid_amount1 # Replace with the desired amount\n        #     new_row.course_fee = g_total\n        #     new_row.amounts = outstanding\n        #     new_row.accounts = account_name\n        #     new_row.insert()\n        \n        #     frappe.msgprint(str('New document created successfully and Row updated successfully'))\n    \n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-12 09:48:52.288453",
  "module": "Education",
  "name": "Prog",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student",
  "script": "if doc.student_applicant:\n    # Get the Student Applicant document\n    app_doc = frappe.get_doc(\"Student Applicant\", doc.student_applicant)\n    \n    # Check if the Student Applicant document exists\n    if app_doc:\n        # Set the program field from the Student Applicant document to the custom_program field in the current document\n        doc.custom_program = app_doc.program\n\n\n# ......................\n# sa= doc.student_applicant\n# App_doc= frappe.get_doc(\"Student Applicant\",sa)\n# # frappe.msgprint(str(App_doc))\n# # frappe.msgprint(str(App_doc.program))\n# doc.custom_program = App_doc.program\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-16 11:28:56.059040",
  "module": "Education",
  "name": "op code",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Opportunity",
  "script": "# .\npartyName = doc.custom_partyname\nfrappe.msgprint(str(partyName))\nif doc.custom_partyname:\n    doc.party_name = doc.custom_partyname;\nelse:\n    frappe.msgprint(str(\"party_Name not found\"))\n    \n    ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-29 11:31:44.915175",
  "module": "Education",
  "name": "student app convt status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Applicant",
  "script": "# .\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-03-20 12:52:35.211863",
  "module": "CRM",
  "name": "User Password",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Program Enrollment",
  "script": "# ..\nstudent_id = doc.student\nstudent_email_id  = None\n\nfrappe.msgprint(str(student_id))\n\nstudent_master = frappe.get_doc(\"Student\",student_id) \n# frappe.msgprint(str(student_master.student_email_id))\nstudent_email_id = student_master.student_email_id\n\nuser_list = frappe.get_doc(\"User\",student_email_id)\n\n# user_list = frappe.get_list(\"User\",filters = {\"email\":student_email_id })\n\n# frappe.msgprint(str(user_list.))\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-02-28 16:11:21.011490",
  "module": "Education",
  "name": "custom_lead_status",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Student Applicant",
  "script": "lead = doc.custom_lead\nlead_opp = doc.custom_opp_name\n\nif doc.paid == 1:\n    # Update Lead status\n    lead_doc = frappe.get_doc(\"C_Lead\", lead)\n    if lead_doc:\n        frappe.db.set_value(\"C_Lead\", lead, \"status\", \"CONVERTED\")\n    else:\n        frappe.msgprint(f\"C_Lead {lead} not found!\")\n\n    # Update Opportunity status\n    opp_doc = frappe.get_doc(\"C_opportunity\", lead_opp)\n    if opp_doc:\n        frappe.db.set_value(\"C_opportunity\", lead_opp, \"status\", \"CONVERTED\")\n    else:\n        frappe.msgprint(f\"C_opportunity {lead_opp} not found!\")\n\n\n# ../\n# lead = doc.custom_lead\n# lead_opp = doc.custom_opp_name\n\n# # frappe.msgprint(str(lead))\n# # frappe.msgprint(str(lead_opp))\n# if doc.paid == 1:\n\n#     leads = frappe.get_doc(\"Lead\", lead)\n#     frappe.db.set_value(\"Lead\",lead,\"status\",\"Converted\")\n    \n#     Oppertunity_doc = frappe.get_doc(\"Opportunity\",lead_opp)\n#     frappe.db.set_value(\"Opportunity\",lead_opp,\"status\",\"Converted\")\n\n\n",
  "script_type": "DocType Event"
 }
]